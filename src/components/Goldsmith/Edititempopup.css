
.popup-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 80%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000; 
}

.popup-content {
  background-color: #fefefe;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px; 
  max-height: 80vh; 
  overflow-y: auto; 
}

.popup-content h3 {
  margin-top: 0;
  margin-bottom: 15px;
  color: #333;
  text-align: center;
}

.popup-content label {
  display: block;
  margin-bottom: 10px;
  font-weight: bold;
  color: #555;
}

.popup-content input[type="text"] {
  width: calc(100% - 12px);
  padding: 8px;
  margin-top: 5px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.popup-content div {
  margin-bottom: 10px;
  padding: 8px;
  border: 1px solid #eee;
  border-radius: 4px;
  background-color: #f9f9f9;
}

.popup-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 20px;
}

.popup-buttons button {
  padding: 10px 15px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.popup-buttons button:first-child {
  background-color: #5cb85c; 
  color: white;
}

.popup-buttons button:first-child:hover {
  background-color: #4cae4c;
}

.popup-buttons button:last-child {
  background-color: #d9534f; 
  color: white;
}

.popup-buttons button:last-child:hover {
  background-color: #c9302c;
}




























/* 


import React, { useState, useEffect } from "react";
import "./jobcarddd.css";

const LOCAL_STORAGE_KEY = "jobcardEntries";

const Jobcarddd = ({ name, phone, address }) => {
  const getTodayDate = () => {
    const today = new Date();
    return today.toISOString().split("T")[0];
  };

  const [formData, setFormData] = useState({
    date: getTodayDate(),
    givenWeight: "",
    touch: "",
    finalTouch: "",
    estimateWeight: "",
    item: "",
    quantity: "",
    description: "",
  });

  const [derivedData, setDerivedData] = useState({
    purity: 0,
    pureValue: 0,
    finalWeight: 0,
    copper: 0,
  });
  

  const [entries, setEntries] = useState([]);
  const [showPopup, setShowPopup] = useState(false);
  const [selectedEntryIndex, setSelectedEntryIndex] = useState(null);
  const [productInput1, setProductInput1] = useState("");
  const [productInput2, setProductInput2] = useState("");
  const [productItems, setProductItems] = useState([]);
  const [popupFinalWeight, setPopupFinalWeight] = useState("");
  const [popupWastage, setPopupWastage] = useState("");
  const [wastageType, setWastageType] = useState("+");

  useEffect(() => {
    const { givenWeight, touch, finalTouch } = formData;
    const gWeight = parseFloat(givenWeight) || 0;
    const gTouch = parseFloat(touch) || 0;
    const fTouch = parseFloat(finalTouch) || 0;

    const purity = (gWeight * gTouch) / 100;
    const pureValue = fTouch / 100;
    const finalWeight = pureValue !== 0 ? purity / pureValue : 0;
    const copper = gWeight - finalWeight;

    setDerivedData({
      purity: purity.toFixed(3),
      pureValue: pureValue.toFixed(3),
      finalWeight: finalWeight.toFixed(3),
      copper: copper.toFixed(3),
    });
  }, [formData.givenWeight, formData.touch, formData.finalTouch]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSave = () => {
    // setEntries([...entries, { ...formData, ...derivedData }]);
    setEntries([
      ...entries,
      {
        ...formData,
        ...derivedData,
        manualFinalWeight: "",
        wastage: "",
        productItems: [],
        productInput1: "",
        productInput2: "",
      },
    ]);

    setFormData({
      date: getTodayDate(),
      givenWeight: "",
      touch: "",
      finalTouch: "",
      estimateWeight: "",
      item: "",
      quantity: "",
      description: "",
    });
    setDerivedData({
      purity: 0,
      pureValue: 0,
      finalWeight: 0,
      copper: 0,
    });
  };

  const handleView = (index) => {
    const entry = entries[index];
    setSelectedEntryIndex(index);
    setShowPopup(true);
    setProductItems(entry.productItems || []);
    setPopupFinalWeight(entry.baseFinalWeight || "");
    // setPopupWastage(entry.wastage || "");
    setProductInput1(entry.productInput1 || "");
    setProductInput2(entry.finalTouch || "");
    setWastageType(entry.wastageType || "+");

     
    // setFinalWeight(parseFloat(entry.baseFinalWeight) || 0);
  
    setPopupWastage(entry.popupWastage || "");
  };

  
  
  


  

  const handleAddRow = () => {
    setProductItems([...productItems, { name: "", weight: "" }]);
  };

  const handleProductItemChange = (index, field, value) => {
    const updated = [...productItems];
    updated[index][field] = value;
    setProductItems(updated);
  };

  useEffect(() => {
    const storedEntries = localStorage.getItem(LOCAL_STORAGE_KEY);
    if (storedEntries) {
      setEntries(JSON.parse(storedEntries));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(entries));
  }, [entries]);

  useEffect(() => {
    if (showPopup && selectedEntryIndex !== null) {
      const touchValue =
        parseFloat(entries[selectedEntryIndex]?.finalTouch) || 0;
      setProductInput2(touchValue.toFixed(3));
    }
  }, [showPopup, selectedEntryIndex]);

  // const productWeight =
  // ((parseFloat(productInput1) || 0) * (parseFloat(productInput2) || 0)) / 100;

  const productWeight = parseFloat(productInput1 || 0);

  const addItemWeight = productItems.reduce(
    (sum, item) => sum + (parseFloat(item.weight) || 0),
    0
  );

  const finalWeight = productWeight - addItemWeight;

  const calculateWastage = () => {
    const baseWeight =
      parseFloat(entries[selectedEntryIndex]?.baseFinalWeight) ||
      parseFloat(finalWeight) ||
      0;
  
    const wastage = parseFloat(popupWastage) || 0;
  
    if (wastageType === "+") {
      return baseWeight + wastage;
    } else if (wastageType === "%") {
      return baseWeight + (baseWeight * wastage) / 100;
    }
    return baseWeight;
  };





  const handleAddSubEntry = (groupIndex) => {
    const updatedGroups = [...entryGroups];
    updatedGroups[groupIndex].subEntries.push({
      date: "",
      givenWeight: "",
      touch: "",
      purity: "",
      finalTouch: "",
      copper: "",
      finalWeight: ""
    });
    setEntryGroups(updatedGroups);
  };
  
  
  

  return (
    <div className="jobcard-container">
      <div className="job-card-header">
        <div className="job-card-logo">Premier Jewel</div>
        <div className="job-card-contact">
          <p>Town Hall 458 Road</p>
          <p>Coimbatore</p>
          <p>9875637456</p>
        </div>
      </div>
      <div className="form-section">
        <div className="details-grid-2x6">
          <div className="grid-cell">
            <label>Date</label>
            <input
              type="date"
              name="date"
              value={formData.date}
              onChange={handleChange}
            />
          </div>
          <div className="grid-cell">
            <label>Given Weight</label>
            <input
              name="givenWeight"
              value={formData.givenWeight}
              onChange={handleChange}
            />
          </div>
          <div className="grid-cell">
            <label>Touch</label>
            <input
              name="touch"
              value={formData.touch}
              onChange={handleChange}
            />
          </div>
          <div className="grid-cell">
            <label>Purity</label>
            <input value={derivedData.purity} readOnly />
          </div>
          <div className="grid-cell">
            <label>Final Touch</label>
            <input
              name="finalTouch"
              value={formData.finalTouch}
              onChange={handleChange}
            />
          </div>
          <div className="grid-cell">
            <label>Copper</label>
            <input value={derivedData.copper} readOnly />
          </div>
          <div className="grid-cell">
            <label>Given Final Weight</label>
            <input value={derivedData.finalWeight} readOnly />
          </div>
          <div className="grid-cell">
            <label>Estimate Weight</label>
            <input
              name="estimateWeight"
              value={formData.estimateWeight}
              onChange={handleChange}
            />
          </div>
          <div className="grid-cell">
            <label>Select Item</label>
            <input name="item" value={formData.item} onChange={handleChange} />
          </div>
          <div className="grid-cell">
            <label>Quantity</label>
            <input
              name="quantity"
              value={formData.quantity}
              onChange={handleChange}
            />
          </div>
          <div className="grid-cell">
            <label>Description</label>
            <textarea
              name="description"
              value={formData.description}
              onChange={handleChange}
              rows="1"
            />
          </div>
          <div className="grid-cell">
            <label>Pure Value</label>
            <input value={derivedData.pureValue} readOnly />
          </div>
        </div>

        <button className="save-btn" onClick={handleSave}>
          Save
        </button>
      </div>
      <hr /> <br />
      <h2 className="title">Goldsmith Information</h2>
      <div className="info-card">
        <p> <strong>Name:</strong> {name}   </p>
        <p> <strong>Address:</strong> {address}  </p>
        <p> <strong>Phone Number:</strong> {phone} </p>
      </div>
       <table className="styled-table">
        <thead>
          <tr>
            <th rowSpan="2">S.No</th>
            <th rowSpan="2">Item</th>
            <th colSpan="6">Given Weight Details</th>
            <th rowSpan="2">Product Weight</th>
            <th rowSpan="2">Final Weight</th>
            <th rowSpan="2">Wastage</th>
            <th rowSpan="2">Product Items</th>
            <th rowSpan="2">Actions</th>
          </tr>
          <tr>
            <th>Given Weight</th>
            <th>Touch</th>
            <th>Purity</th>
            <th>Final Touch</th>
            <th>Copper</th>
            <th>Given Final Weight</th>
          </tr>
        </thead>
        <tbody>
          {entries.map((entry, index) => (
            <tr key={index}>
              <td>{index + 1}</td>
              <td>{entry.item}</td>
              <td>{entry.givenWeight}</td>
              <td>{entry.touch}</td>
              <td>{entry.purity}</td>
              <td>{entry.finalTouch}</td>
              <td>{entry.copper}</td>
              <td>{entry.finalWeight}</td>
              <td> {entry.productInput1}</td>
              <td>{entry.baseFinalWeight || ""}</td>

              <td>{entry.manualFinalWeight}</td>  


              <td>
                {entry.productItems && entry.productItems.length > 0
                  ? entry.productItems.map((item, idx) => (
                      <div key={idx}>
                        {item.name} - {item.weight}
                      </div>
                    ))
                  : "-"}
              </td>
              <td>
                <button onClick={() => handleView(index)}>View</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table> 





      {showPopup && (
        <div className="popup-overlay">
          <div className="popup-content">
            <div className="popup-header">
              <h3>Jobcard Details</h3>
              <span className="close-btnn" onClick={() => setShowPopup(false)}>
                {" "}
                ✕{" "}
              </span>
            </div>{" "}
            <hr />
            <div className="details-grid-2x6">
              {[
                { label: "Date", key: "date", type: "date" },
                { label: "Given Weight", key: "givenWeight" },
                { label: "Touch", key: "touch" },
                { label: "Final Touch", key: "finalTouch" },
                { label: "Estimate Weight", key: "estimateWeight" },
                { label: "Item", key: "item" },
                { label: "Quantity", key: "quantity" },
                { label: "Description", key: "description" },
                { label: "Purity", key: "purity", readonly: true },
                { label: "Pure Value", key: "pureValue", readonly: true },
                {
                  label: "Final Weight",
                  key: "finalWeight",
                  readonly: true,
                },
                { label: "Copper", key: "copper", readonly: true },
              ].map(({ label, key, readonly, type = "text" }) => (
                <div key={key} className="grid-cell">
                  <label>{label}</label>
                  {key === "description" ? (
                    <textarea
                      rows="1"
                      value={entries[selectedEntryIndex][key]}
                      readOnly={readonly}
                      onChange={(e) => {
                        if (!readonly) {
                          const updated = [...entries];
                          updated[selectedEntryIndex][key] = e.target.value;
                          setEntries(updated);
                        }
                      }}
                    />
                  ) : (
                    <input
                      type={type}
                      value={entries[selectedEntryIndex][key]}
                      readOnly={readonly}
                      onChange={(e) => {
                        if (!readonly) {
                          const updated = [...entries];
                          updated[selectedEntryIndex][key] = e.target.value;
                          setEntries(updated);
                        }
                      }}
                    />
                  )}
                </div>
              ))}
            </div>{" "}
            <hr />
            <div>
              <label>
                <strong>Product Weight Calculation:</strong>
              </label>
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "10px",
                  marginBottom: "0px",
                }}
              >
                <input
                  type="number"
                  value={productInput1}
                  onChange={(e) => setProductInput1(e.target.value)}
                  style={{ width: "80px" }}
                  placeholder="Weight"
                />

                <span>= {productWeight.toFixed(2)}</span>
              </div>
            </div>
            <hr />
            <div>
              <button onClick={handleAddRow} className="add">
                Add Item
              </button>
              <div
                style={{
                  maxHeight: "230px",
                  overflowY: "auto",
                  border: "1px solid #ccc",
                  borderRadius: "8px",
                }}
              >
                <table style={{ width: "100%", borderCollapse: "collapse" }}>
                  <thead
                    style={{
                      backgroundColor: "#f0f0f0",
                      position: "sticky",
                      top: 0,
                      zIndex: 1,
                    }}
                  >
                    <tr>
                      <th
                        style={{
                          padding: "8px",
                          borderBottom: "1px solid #ccc",
                        }}
                      >
                        S.No
                      </th>
                      <th
                        style={{
                          padding: "8px",
                          borderBottom: "1px solid #ccc",
                        }}
                      >
                        Name
                      </th>
                      <th
                        style={{
                          padding: "8px",
                          borderBottom: "1px solid #ccc",
                        }}
                      >
                        Weight
                      </th>
                      <th
                        style={{
                          padding: "8px",
                          borderBottom: "1px solid #ccc",
                        }}
                      >
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {productItems.map((item, idx) => (
                      <tr key={idx} style={{ borderBottom: "1px solid #eee" }}>
                        <td style={{ padding: "8px", textAlign: "center" }}>
                          {idx + 1}
                        </td>
                        <td style={{ padding: "8px" }}>
                          <select
                            value={item.name}
                            onChange={(e) =>
                              handleProductItemChange(
                                idx,
                                "name",
                                e.target.value
                              )
                            }
                            style={{ width: "100%" }}
                          >
                            <option value="">Select</option>
                            <option value="Enamel">Enamel</option>
                            <option value="Beads">Beads</option>
                            <option value="Stone">Stone</option>
                            <option value="Other">Other</option>
                          </select>
                          {item.name === "Other" && (
                            <input
                              placeholder="Enter name"
                              value={item.customName || ""}
                              onChange={(e) =>
                                handleProductItemChange(
                                  idx,
                                  "customName",
                                  e.target.value
                                )
                              }
                              style={{ width: "100%", marginTop: "4px" }}
                            />
                          )}
                        </td>
                        <td style={{ padding: "8px" }}>
                          <input
                            placeholder="Weight"
                            value={item.weight}
                            onChange={(e) =>
                              handleProductItemChange(
                                idx,
                                "weight",
                                e.target.value
                              )
                            }
                            style={{ width: "100%" }}
                          />
                        </td>
                        <td style={{ padding: "8px", textAlign: "center" }}>
                          <button
                            onClick={() => {
                              alert(`Editing item ${idx + 1}`);
                            }}
                            style={{
                              padding: "5px 10px",
                              borderRadius: "4px",
                              backgroundColor: "#1976d2",
                              color: "#fff",
                              border: "none",
                              cursor: "pointer",
                            }}
                          >
                            Edit
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>{" "}
            <hr />
            <div style={{ marginTop: "0px" }}>
              <label>
                <strong>Final Weight Calculation:</strong>
              </label>
              <div
                style={{ display: "flex", alignItems: "center", gap: "10px" }}
              >
                <span>Product Weight = {productWeight.toFixed(2)}</span>
                <span>−</span>
                <span>Add Items = {addItemWeight.toFixed(2)}</span>
                <span>=</span>
                <input
                  value={finalWeight.toFixed(3)}
                  readOnly
                  style={{ backgroundColor: "#f0f0f0", width: "100px" }}
                />
              </div>
            </div>
            <hr />


<div style={{ display: "flex", justifyContent: "space-between", gap: "20px", alignItems: "flex-start" }}>

  <div style={{ display: "flex", alignItems: "center", gap: "10px" }}>
    <label><strong>Wastage:</strong></label>
    <input
      value={finalWeight.toFixed(3)}
      readOnly
      style={{ backgroundColor: "#f0f0f0", width: "100px" }}
    />
    <select
      value={wastageType}
      onChange={(e) => setWastageType(e.target.value)}
      style={{ width: "60px" }}
    >
      <option value="+">+</option>
      <option value="%">%</option>
    </select>
    <input
      type="number"
      value={popupWastage}
      onChange={(e) => setPopupWastage(e.target.value)}
      placeholder="Wastage"
      style={{ width: "100px" }}
    /> =
    <input style={{width:'6rem'}}
 
      value={calculateWastage().toFixed(3)}
      readOnly
    />
    //  {<div>= {calculateWastage().toFixed(3)}</div>}   //
  </div>


  <div
    style={{
      minWidth: "200px",
      padding: "10px",
      border: "1px solid #ccc",
      borderRadius: "8px",
      backgroundColor: "#f9f9f9",
      fontWeight: "bold",
      fontSize: "14px",
      marginRight:'3rem'
    }}
  >
    {wastageType === "%" ? (
      <>
        <div>
          {finalWeight.toFixed(3)} × {popupWastage}% ={" "}
          {(finalWeight * (popupWastage / 100)).toFixed(3)}
        </div>
        <div>Total: {calculateWastage().toFixed(3)}</div>
      </>
    ) : (
      <>
        <div>
          {finalWeight.toFixed(3)} + {popupWastage} ={" "}
          {calculateWastage().toFixed(3)}
        </div>
      </>
    )}
  </div>
</div>
            <button
              className="btn-update"
              onClick={() => {
                const updated = [...entries];

                updated[selectedEntryIndex].baseFinalWeight = finalWeight.toFixed(3); // base value before adding wastage
updated[selectedEntryIndex].popupWastage = popupWastage;
updated[selectedEntryIndex].wastageType = wastageType;
updated[selectedEntryIndex].manualFinalWeight = calculateWastage().toFixed(3); // final total
updated[selectedEntryIndex].wastage = `${popupWastage} ${wastageType}`;
updated[selectedEntryIndex].productInput1 = productInput1;
updated[selectedEntryIndex].productItems = productItems.map((item) => ({
  name: item.name === "Other" ? item.customName || "Other" : item.name,
  weight: item.weight,
}));
updated[selectedEntryIndex].wastageValue = calculateWastage();

                setEntries(updated);
                setShowPopup(false);
              }}              
            >
              Update
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Jobcarddd; */








                /* <span>×</span>
    <input
      type="number"
      value={productInput2}
      readOnly
      style={{ width: "80px", backgroundColor: "#f0f0f0" }}
    /> */